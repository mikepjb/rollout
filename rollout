#!/bin/bash -e
# vim: fdm=marker

# TODO change android bluetooth keyboard layout to us?
# TODO xsetroot -solid "#cbd5e0"
# TODO check arch linux for general recommendations
# TODO make sure gmail/good email client opens when firefox click email address
# TODO make cygwin compat (no sudo, detect if X11/has display for xrdb etc on urxvt/mintty)
# TODO trap exit_code and revert file changes if an error occurs
# TODO check min version for tmux and warn (do not fail)
# TODO remove screen-256color note if xterm-256color works fine

# TODO tailwindcss language server npm install
# TODO typescript-javascript-langserver npm install

# Functions {{{

# N.B 1; also turns on bold mode
red_code='\033[1;31m'
green_code='\033[1;32m'
yellow_code='\033[1;33m'
blue_code='\033[1;34m'
magenta_code='\033[1;35m'
reset_code='\033[0m'

function red { printf -- "$red_code$*$reset_code"; }
function yellow { printf -- "$yellow_code$*$reset_code"; }
function green { printf -- "$green_code$*$reset_code"; }
function blue { printf -- "$blue_code$*$reset_code"; }
function magenta { printf -- "$magenta_code$*$reset_code"; }

function check_command {
  if [ ! $(command -v $1) ]; then
    printf -- "$(yellow You don\'t seem to have $1 installed.)\n"
    return 0
  fi

  if [ "$2" != "" ]; then # we are checking for version
    if [ "$1" = 'tmux' ]; then
      v_string=$(tmux -V)
      if [ "${v_string:5:1}" -lt "$2" ]; then
        printf -- "$(red tmux is version "${v_string:5:1}", $2 is preferred)\n"
      fi
    elif [ "$1" = 'java' ]; then
      v_string=$(java --version)
      if [ "${v_string:0:10}" != "$2" ]; then
        printf -- "$(yellow java is version "${v_string:0:10}", not $2)\n"
      fi
    fi
  fi
}

function check_completion {
  for script in /etc/bashrc /etc/bash.bashrc $HOME/.bashrc; do
    if [ -f $script ]; then
      if grep bash_completion $script >/dev/null; then
        printf -- "$(yellow '   ->') bash-completion $(yellow "($script contains bash_completion)")\n"
        return 0
      fi
    fi
  done
  printf -- "$(red '   ->') bash-completion $(red '(no reference found)')\n"
  printf -- "did not find it :(\n"
}

function write_and_save { # write_and_save ~/.bashrc "$bashrc"
  name=$(basename "$1")
  echo "$(blue '  ->') checking if $1 matches..."
  if [ -L "$1" ]; then
      echo "$(yellow '  ->') $1 exists and is a softlink, removing.."
      unlink $1
  fi

  if [ -f "$1" ]; then
    if [ "$(cat $1)" != "$2" ]; then
      echo "$(blue '  ->') $1 does not match, backing up to ~/.config/backup/$name"
      mkdir -p ~/.config/backup
      mv "$1" ~/.config/backup/$name
      echo "$(blue '  ->') writing new $1"
      echo "$2" > "$1"
    else
      echo "$(blue '  ->') "$1" matches generated version, no action required"
    fi
  else
    echo "$(blue '  ->') "$1" does not exist, writing new version"
    mkdir -p "$(dirname "$1")"
    echo "$2" > "$1"
  fi
}

function include {
  name=$(echo $1 | cut -d/ -f2)
  echo "$(blue '  ->') looking for ~/.vim/bundle/$name"
  if [ ! -d "$HOME/.vim/bundle/$name" ]; then
    git clone "https://github.com/$1.git" "$HOME/.vim/bundle/$name"
  fi
}


# }}}
# Start {{{
echo "$(green '==>') Rollout ___o"
# }}}
# Read Arguments & Environment {{{

platform=$(uname -o)
theme="dark"

if [ ${#@} -ne 0 ]; then
  case $* in
    *--help*) printf -- '...help...\n'; exit 0;;
    *-h*) printf -- '...help...\n'; exit 0;;
    *--light*) theme="light";;
    *--dark*) theme="dark";;
  esac
fi

# }}}
# Dependencies {{{

deps='#basics
tmux git jq java lein boot gimp rlwrap awk grep vim nvim sed ssh curl wget man
#languages
clojure python ruby node bash
#build-tools
gcc make automake autoconf basename
#development-tools
htop ssh-agent ssh-keygen rg xmllint tig
#development-servers
redis-server postgres mongo
#ui
xterm gnome-session openbox-session xrdb xdpyinfo xset setxkbmap firefox chromium
#photography
darktable gthumb'

echo "$(green '==>') Dependencies"

for dep in $deps; do
  if [ "${dep:0:1}" == '#' ]; then
    echo "$(blue '  ->') ${dep:1}"
  else
    if [ $(command -v $dep) ]; then
      echo "$(yellow '   ->') $dep"
    else
      echo "$(red '   ->') $dep $(red '(missing)')"
    fi
  fi
done

check_command tmux 2

echo "$(blue '  ->') shell"
check_completion

# }}}
# Colors {{{
printf -- "$(green '==>') Color\n"
if [ "$theme" = "dark" ]; then
  printf -- "$(blue '  ->') Setting Lumo (dark) theme\n"
  foreground=#f7fafc
  background=#1a202c
  cursor=#f7fafc
  black=#2d3748
  bright_black=#718096
  red=#f56565
  bright_red=#feb2b2
  green=#c6f6d5
  bright_green=#f0fff4
  yellow=#faf089
  bright_yellow=#fefcbf
  blue=#bee3f8
  bright_blue=#ebfff8
  magenta=#ed64a6
  bright_magenta=#fbb6ce
  cyan=#4fd1c5
  bright_cyan=#b2f5ea
  white=#f7fafc
  bright_white=#ffffff
else
  printf -- "$(blue '  ->') Setting light theme variables\n"
  foreground=#444444
  background=#eeeeee
  cursor=#444444
  black=#1d1e1a
  bright_black=#7c7c7c
  red=#800000
  bright_red=#f44336
  green=#365d2e
  bright_green=#a8c960
  yellow=#cf8f2e
  bright_yellow=#cf8f2e
  blue=#486ab4
  bright_blue=#486ab4
  magenta=#9933ff
  bright_magenta=#8b1e8b
  cyan=#486ab4
  bright_cyan=#486ab4
  white=#eeeeee
  bright_white=#eeeeee
fi

printf -- "$(yellow '  ->') write vim/neovim color files $(yellow '(not implemented)')\n"

# }}}
# Font {{{
printf -- "$(green '==>') Font\n"

printf -- "$(blue '  ->') not implemented for now.\n"
# terminus=$(fc-list :scalable=true:spacing=mono: family | grep 'xos4 Terminus')
# maybe just select from the above call?

# if [ "$terminus" = '' ]; then
# 
# else
#   printf -- "$(blue '  ->') Terminus font found using fc-list\n"
# fi

# }}}
# Locale {{{

echo '--> Check locale-gen?'

printf -- "$(yellow '  ->') I do not currently write to /etc/vconsole.conf $(yellow '(not implemented)')\n"

# TODO check for terminus too otherwise.. what is a safe choice? can I just say default mono?

xterm_text_size=12
dpi=70

if [ $(command -v xdpyinfo) ] && [ $(command -v awk) ]; then
  if [ `xdpyinfo | awk '/dimensions/{print $2}'` = '3840x2160' ]; then
    printf -- "$(blue '  ->') HiDPI screen detected, adjusting dpi & xterm text size\n"
    dpi=144
    xterm_text_size=28
  fi
else
  printf -- "$(yellow '  ->') xdpyinfo and/or awk are not present so I can't check your resolution.\n"
fi


# TODO if we don't have terminus installed, *font will cause X11 emacs to fail:
xresources=$(cat <<EOF
Xft.dpi: $dpi
XTerm*utf8: 1
XTerm*termName: xterm-256color
XTerm*VT100.geometry: 160x50
*font: -*-terminus-medium-*-*-*-$xterm_text_size-*-*-*-*-*-iso10646-1
XTerm*titeInhibit: false
XTerm*ScrollBar: false
XTerm*ScrollKey: false
XTerm*metaSendsEscape: true
*background:  $background
*foreground:  $foreground
*cursorColor: $cursor
*color0:      $black
*color1:      $red
*color2:      $green
*color3:      $yellow
*color4:      $blue
*color5:      $magenta
*color6:      $cyan
*color7:      $white
*color8:      $bright_black
*color9:      $bright_red
*color10:     $bright_green
*color11:     $bright_yellow
*color12:     $bright_blue
*color13:     $bright_magenta
*color14:     $bright_cyan
*color15:     $bright_white
xterm.*backarrowKey: false
*ttyModes:         erase ^?
*VT100.Translations: \
        #override <Key>BackSpace: string(0x7f) \n\
                  <Key>Delete:    string(0x1b) string("[3~")
xterm*VT100.Translations: #override \
                Ctrl Shift <Key>V:    insert-selection(CLIPBOARD) \n\
                Ctrl Shift <Key>C:    copy-selection(CLIPBOARD)
EOF
)

xinitrc=$(cat <<"EOF"
LANG='en_GB.UTF-8'

[[ -f ~/.Xresources ]] && xrdb -merge ~/.Xresources

xset r rate 200 25

setxkbmap -layout us -option ctrl:nocaps

if command -v gnome-session; then
  exec gnome-session
else
  exec openbox-session
fi
EOF
)

termux_colours=$(cat <<EOF
background=$background
foreground=$foreground
cursor=$cursor
color0=$black
color1=$red
color2=$green
color3=$yellow
color4=$blue
color5=$magenta
color6=$cyan
color7=$white
color8=$bright_black
color9=$bright_red
color10=$bright_green
color11=$bright_yellow
color12=$bright_blue
color13=$bright_magenta
color14=$bright_cyan
color15=$bright_white
EOF
)

# TODO am I running inside a display? xhost not present on arch == unreliable
if [ ! "$platform" = "Android" ]; then
  xrdb -merge <<< "$xresources"
fi

write_and_save ~/.xinitrc "$xinitrc"
write_and_save ~/.Xresources "$xresources"

if [ "$platform" = "Android" ]; then
  mkdir -p ~/.termux
  write_and_save ~/.termux/colors.properties "$termux_colours"
fi

# }}}
# Editor {{{
printf -- "$(green '==>') Editor\n"

if ! diff $(which vi) $(which vim) >/dev/null; then
  echo "$(blue '  ->') vi and vim are not the same $(yellow '(mismatch)')"
  echo "$(blue '  ->') attempting to copy vim binary to /usr/local/bin..."
  # sudo cp $(which vim) /usr/local/bin/vi
fi

if [ ! -f ~/.vim/autoload/pathogen.vim ]; then
  mkdir -p ~/.vim/autoload ~/.vim/bundle
  if [ $(command -v curl) ]; then
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  else
    wget -O ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
  fi
fi

include 'tpope/vim-fireplace'
include 'tpope/vim-fugitive'
include 'mikepjb/vim-pair'
include 'mikepjb/vim-fold'
include 'pangloss/vim-javascript'
include 'MaxMEllon/vim-jsx-pretty'
include 'alvan/vim-closetag'
include 'mattn/emmet-vim'
include 'mikepjb/vim-lsc'
include 'ajh17/VimCompletesMe'
include 'ElmCast/elm-vim'
include 'posva/vim-vue'

vimrc=$(cat <<"EOF"
execute pathogen#infect()
syn on
filetype plugin indent on
set nocompatible nu autowrite hidden shiftwidth=2 tabstop=2 gdefault mouse=a
set clipboard=unnamed,unnamedplus expandtab smarttab ignorecase smartcase
set shortmess+=c iskeyword+=- path+=** wildmenu noswapfile textwidth=79
set wildignore+=**/node_modules/**,**/cljs/**.js*,**/cljs-out/*,**/target/*
" set completeopt=menu,menuone,noinsert,noselect
set stl=--\ %1*%F%m%r%h%w%*\ %=\ %y\ -\ [%l,%c]\ [%L,%p%%] showtabline=1
set fillchars=stlnc:\-,stl:\-,vert:\|
setglobal tags=./tags;
runtime macros/matchit.vim
let g:ftplugin_sql_omni_key = '<Nop>' " ctrl+c is for escape, not completion.


let mapleader= ' '
nnoremap Y y$
nnoremap Q @q
nnoremap gb :Gblame<cr>
nnoremap <C-q> :quit<cr>
nnoremap <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
nnoremap <leader>d :LSClientShowHover<CR>
nnoremap <leader>f :find<space>
nnoremap <leader>i :e ~/src/rollout/rollout<cr>
nnoremap <leader>l :e ~/.log.md<cr>
nnoremap <leader>b :b<space>
imap <C-c> <esc>

map <C-h> <C-w><C-h>
map <C-j> <C-w><C-j>
map <C-k> <C-w><C-k>
map <C-l> <C-w><C-l>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-d> <Delete>
inoremap <buffer><expr> <C-l> Arrow()

function! Arrow()
  if (&ft == 'javascript' || &ft == 'html')
    return ' => '
  endif
  return ' -> '
endfunction

command! TrimWhitespace :%s/\s\+$//e
command! ClearPrefixWhitespace :%s/^\s\+//g
command! PrettifyJSON :%!python -m json.tool
command! PrettifyXML  :%!xmllint --format -
command! JackInCljs :CljEval (figwheel.main.api/cljs-repl "dev")<cr>
nnoremap zS :echo join(reverse(map(synstack(line('.'), col('.')), 'synIDattr(v:val,"name")')),' ')<cr>

colorscheme rollout

set cot+=preview

augroup clojure
  au Syntax clojure nmap <buffer>  gd <Plug>FireplaceDjump
augroup end

if executable('tailwindcss-language-server')
  let g:tailwind_server_config = {
    \ 'html': {
    \   'command': 'tailwindcss-language-server --stdio',
    \   'suppress_stderr': v:true,
    \   },
    \ 'javascript': {
    \   'command': 'tailwindcss-language-server --stdio',
    \   'suppress_stderr': v:true,
    \   },
    \ }
  let g:lsc_enable_autocomplete  = v:true

  let g:lsc_server_commands = g:tailwind_server_config
endif

if executable('javascript-typescript-langserver')
  let g:javascript_server_config = {
    \ 'html': {
    \   'command': 'javascript-typescript-stdio',
    \   'suppress_stderr': v:true,
    \   },
    \ 'javascript': {
    \   'command': 'javascript-typescript-stdio',
    \   'suppress_stderr': v:true,
    \   },
    \ }
  let g:lsc_enable_autocomplete  = v:true

  let g:lsc_server_commands = g:javascript_server_config
endif

let g:lsc_auto_map = {
 \  'GoToDefinition': 'gd',
 \  'FindReferences': 'gr',
 \  'Rename': 'gR',
 \  'ShowHover': 'K',
 \  'Completion': 'omnifunc',
 \}

function! SwapLanguageServer(config)
  LSClientDisable
  for [filetype, config] in items(a:config)
    call RegisterLanguageServer(filetype, config)
  endfor
  LSClientEnable
endfunction
command! Tailwind :call SwapLanguageServer(g:tailwind_server_config)
command! JS :call SwapLanguageServer(g:javascript_server_config)

let g:closetag_filenames = '*.html,*.xhtml,*.md,*.js,*.vue'
EOF
)

write_and_save ~/.vimrc "$vimrc"

rollout=$(cat <<"EOF"
hi clear
if exists("syntax_on")
  syntax reset
endif
set background=dark

let g:colors_name = "rollout"

hi Normal ctermfg=NONE " ex line text & some special chars :? etc?
hi Constant ctermfg=5
hi PreProc ctermfg=1
hi Repeat ctermfg=1
hi Ignore ctermfg=1
hi Number ctermfg=2
hi Function ctermfg=6
hi String ctermfg=7
hi Identifier ctermfg=3
hi Keyword ctermfg=1
hi Special ctermfg=3
hi Preproc ctermfg=1
hi Type ctermfg=2
hi Comment ctermfg=8
hi TODO ctermfg=4 ctermbg=NONE
hi LineNr ctermfg=7 ctermbg=NONE
hi CursorLine ctermfg=7 ctermbg=NONE
hi Visual ctermfg=NONE ctermbg=0
hi Error ctermfg=1 ctermbg=NONE
hi ErrorMsg ctermfg=1 ctermbg=NONE
hi WarningMsg ctermfg=1 ctermbg=NONE
hi NonText ctermfg=1 ctermbg=NONE
hi Delimiter ctermfg=6 ctermbg=NONE
hi MatchParen ctermfg=3 ctermbg=NONE
hi Operator ctermfg=1 ctermbg=NONE
hi PMenu ctermfg=15 ctermbg=0
hi PMenuSel ctermfg=6 ctermbg=NONE
hi PMenuSbar ctermfg=6 ctermbg=0
hi PMenuThumb ctermfg=NONE ctermbg=6
hi Folded ctermfg=7 ctermbg=0
hi Quote ctermfg=6 ctermbg=8
hi FoldedColumn ctermfg=6 ctermbg=8
hi StatusLine ctermfg=15 ctermbg=NONE cterm=NONE
hi StatusLineNC ctermfg=8 ctermbg=NONE cterm=NONE
hi VertSplit ctermfg=7 ctermbg=NONE cterm=NONE
hi User1 ctermfg=2 ctermbg=NONE cterm=NONE

hi! htmlTagName ctermfg=6
hi! htmlSpecialTagName ctermfg=6
hi! htmlTag ctermfg=NONE
hi! htmlTagN ctermfg=NONE
hi! htmlEndTag ctermfg=NONE
hi! link htmlH1 Normal
hi! link jsonQuote Keyword
hi! link jsonKeyword Keyword

" Common groups that link to default highlighting.
" You can specify other highlighting easily.
hi link String	Constant
hi link Character	Constant
hi link Number	Constant
hi link Boolean	Constant
hi link Float		Number
hi link Conditional	Repeat
hi link Label		Statement
hi link Keyword	Statement
hi link Exception	Statement
hi link Include	PreProc
hi link Define	PreProc
hi link Macro		PreProc
hi link PreCondit	PreProc
hi link StorageClass	Type
hi link Structure	Type
hi link Typedef	Type
hi link Tag		Special
hi link SpecialChar	Special
hi link Delimiter	Special
hi link SpecialComment Special
hi link Debug		Special

set stl=--\ %1*%F%m%r%h%w%*\ %=\ %y\ -\ [%l,%c]\ [%L,%p%%] showtabline=1
EOF
)

mkdir -p ~/.vim/colors
write_and_save ~/.vim/colors/rollout.vim "$rollout"

# }}}
# Shell {{{

printf -- "$(green '==>') Shell\n"

bash_path="/bin:/sbin:$HOME/.config/npm/bin:$HOME/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin"

if [ "$platform" = "Android" ]; then
  bash_path="/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:$bash_path"
fi
bashrc=$(cat <<EOF
shopt -s nocaseglob #case insensitive completion

if shopt | grep 'completion_strip_exe' >/dev/null; then
  shopt -s completion_strip_exe
fi

[[ \$- =~ i ]] && stty -ixoff -ixon # Disable CTRL-S and CTRL-Q

export EDITOR=vim
export XDG_CONFIG_HOME=\$HOME/.config
export PAGER='less -S'
export SSH_AUTH_SOCK=\$HOME/.ssh/ssh-agent.socket
export PATH=$bash_path
export CDPATH=\$HOME/src
export NPM_CONFIG_PREFIX=\$HOME/.config/npm

alias gr='cd \$(git rev-parse --show-toplevel || echo ".")'
alias ..='cd ..'
alias t='tmux attach -t vty || tmux new -s vty'
alias de='export \$(egrep -v "^#" .env | xargs)'
alias xclip='xclip -sel clip'
alias jv="jq -C | less -R"
alias ssha="ssh-agent -a \$SSH_AUTH_SOCK && ssh-add ~/.ssh/id_rsa"
alias open='xdg-open'

viw() { vi \`which "\$1"\`; }
pp() { until ping -c1 1.1.1.1 >/dev/null 2>&1; do :; done; }
git_branch() { echo -e "\$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')"; }

git_state() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo -ne "\$(git_branch)"
    else
        echo -ne "!"
    fi
}

jobs_marker() {
  local n=\$(jobs | wc -l)
  ((n)) && echo -n '&' || echo -n '$'
}

PROMPT_COMMAND='PS1="\W(\$(git_state)) \$(jobs_marker) "'
EOF
)

write_and_save ~/.bashrc "$bashrc"

tmuxconf=$(cat <<"EOF"
set -g status-position bottom
# used to be screen-256color (11/02/20), changed to xterm-256color for
# gnome-terminal italics
set -g default-terminal "xterm-256color"
set -gq utf-8 on
set -g default-command $SHELL
set -g history-limit 100000
set -g mouse on
set -g escape-time 1
set -g base-index 1
set -g renumber-windows on
set -g visual-activity on
set-window-option -g alternate-screen on
set -g set-clipboard external # was originally on
set -g status on
unbind C-b; set -g prefix M-\;
unbind r ; bind r source-file ~/.tmux.conf \; display "Tmux Reloaded!"
unbind v ; bind v split-window -c "#{pane_current_path}"
unbind = ; bind = new-window -c "#{pane_current_path}"
unbind s ; bind s split-window -h -c "#{pane_current_path}"
unbind x ; bind x kill-pane
unbind ] ; bind ] command-prompt "rename-window '%%'"
bind -n M-O last-window
bind -n M-o select-pane -t :.+
set -g status-left ""
set -g status-right "#[fg=colour1]//#[fg=default] %d/%m/%y %I:%M"
set -g status-style fg=default,bg=default
set -g pane-border-style fg=default,bg=default
set -g pane-active-border-style fg=default,bg=default
setw -g window-status-current-style fg=colour1,bg=default
EOF
)

write_and_save ~/.tmux.conf "$tmuxconf"
# }}}
# Git {{{
printf -- "$(green '==>') Git Aliases\n"

git config --global --replace-all core.editor 'vim'
git config --global --replace-all core.autocrlf false
git config --global --replace-all alias.aa 'add --all'
git config --global --replace-all alias.br 'branch --sort=committerdate'
git config --global --replace-all alias.st 'status'
git config --global --replace-all alias.count 'shortlog -sn'
git config --global --replace-all alias.ff 'pull --ff-only'
git config --global --replace-all alias.co 'checkout'
git config --global --replace-all alias.ci 'commit --verbose'
git config --global --replace-all alias.di 'diff'
git config --global --replace-all alias.dc 'diff --cached'
git config --global --replace-all alias.dd 'diff --stat origin/develop HEAD'
git config --global --replace-all alias.list 'config --global --list'
git config --global --replace-all alias.amend 'commit --amend'
git config --global --replace-all alias.ffa 'fetch --all && git rebase origin/master'
git config --global --replace-all alias.push-new 'push -u origin HEAD'
git config --global --replace-all alias.ra "log --abbrev-commit --pretty=format:'%<(7)%C(yellow)%h %Cgreen%<(15)%cr%C(bold cyan)%<(17)<%an>%C(red)%d %Creset %s'"
# }}}
