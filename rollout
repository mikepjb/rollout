#!/bin/sh -e
# vim: fdm=marker

# TODO backups should be timestamped e.g .backup-.tmux.conf-20180103

# Functions {{{

# N.B 1; also turns on bold mode
red_code='\033[1;31m'
green_code='\033[1;32m'
yellow_code='\033[1;33m'
blue_code='\033[1;34m'
magenta_code='\033[1;35m'
reset_code='\033[0m'

function red { printf -- "$red_code$*$reset_code"; }
function yellow { printf -- "$yellow_code$*$reset_code"; }
function green { printf -- "$green_code$*$reset_code"; }
function blue { printf -- "$blue_code$*$reset_code"; }
function magenta { printf -- "$magenta_code$*$reset_code"; }

function check_command {
  if [ ! $(command -v $1) ]; then
    printf -- "$(yellow You don\'t seem to have $1 installed.)\n"
    # exit 127 # TODO consider making this a fail
  # else
  #  echo "$1 is installed."
  fi

  if [ "$2" != "" ]; then # we are checking for version
    if [ "$1" = 'tmux' ]; then
      v_string=$(tmux -V)
      if [ "${v_string:5:1}" != "$2" ]; then
        printf -- "$(red tmux is version "${v_string:5:1}", not $2)\n"
        exit 127
      fi
    elif [ "$1" = 'java' ]; then
      v_string=$(java --version)
      if [ "${v_string:0:10}" != "$2" ]; then
        printf -- "$(yellow java is version "${v_string:0:10}", not $2)\n"
        # TODO exit?
      fi
    fi
  fi
}

function write_and_save { # write_and_save ~/.bashrc "$bashrc"
  name=$(basename "$1")
  echo "$(blue '  ->') checking if $1 matches..."
  if [ -f "$1" ]; then
    if [ "$(cat $1)" != "$2" ]; then
      echo "$(blue '  ->') $1 does not match, backing up to ~/.config/backup/$name"
      mkdir -p ~/.config/backup
      mv "$1" ~/.config/backup/$name
      echo "$(blue '  ->') writing new $1"
      echo "$2" > "$1"
    else
      echo "$(blue '  ->') "$1" matches generated version, no action required"
    fi
  else
    echo "$(blue '  ->') "$1" does not exist, writing new version"
    echo "$2" > "$1"
  fi
}

# TODO trap exit_code and revert file changes if an error occurs

# }}}
# Start {{{
echo "$(green '==>') Rollout ___o"
# }}}
# Read Arguments & Environment {{{

platform=$(uname)
theme="dark"

if [ ${#@} -ne 0 ]; then
  case $* in
    *--help*) printf -- '...help...\n'; exit 0;;
    *-h*) printf -- '...help...\n'; exit 0;;
    *--light*) theme="light";;
    *--dark*) theme="dark";;
  esac
fi

# }}}
# Dependencies {{{

deps='#basics
tmux git jq java lein boot gimp rlwrap awk grep vim nvim sed ssh
#languages
clojure python ruby node bash
#build-tools
gcc make automake autoconf basename
#development-tools
htop ssh-agent ssh-keygen
#development-servers
redis-server postgres mongo 
#ui
xterm openbox-session xrdb xdpyinfo xset setxkbmap firefox chromium
#photography
darktable gthumb'

echo "$(green '==>') Dependencies"

for dep in $deps; do
  if [ "${dep:0:1}" == '#' ]; then
    echo "$(blue '  ->') ${dep:1}"
  else
    if [ $(command -v $dep) ]; then
      echo "$(yellow '   ->') $dep"
    else
      echo "$(red '   ->') $dep $(red '(missing)')"
    fi
  fi
done

check_command tmux 2

# }}}
# Colors {{{
printf -- "$(green '==>') Color\n"
if [ "$theme" = "dark" ]; then
  printf -- "$(blue '  ->') Setting Lumo (dark) theme\n"
  foreground=#fcfcfa
  background=#2d2a2e
  cursor=#fcfcfa
  black=#383539
  bright_black=#989599
  red=#ff6188
  bright_red=#ff89a6
  green=#a9dc76
  bright_green=#c5e0a9
  yellow=#fc9867
  bright_yellow=#ffd866
  blue=#78dce8
  bright_blue=#c9edf1
  magenta=#ab9df2
  bright_magenta=#b294bb
  cyan=#78e8cf
  bright_cyan=#c4f9ed
  white=#c3c1c3
  bright_white=#f8f8f2
else
  printf -- "$(blue '  ->') Setting dark theme variables\n"
  foreground=#444444
  background=#eeeeee
  cursor=#444444
  black=#1d1e1a
  bright_black=#7c7c7c
  red=#800000
  bright_red=#f44336
  green=#365d2e
  bright_green=#a8c960
  yellow=#cf8f2e
  bright_yellow=#cf8f2e
  blue=#486ab4
  bright_blue=#486ab4
  magenta=#9933ff
  bright_magenta=#8b1e8b
  cyan=#486ab4
  bright_cyan=#486ab4
  white=#eeeeee
  bright_white=#eeeeee
fi

printf -- "$(yellow '  ->') write vim/neovim color files $(yellow '(not implemented)')\n"

# }}}
# Font {{{
printf -- "$(green '==>') Font\n"

terminus=$(fc-list : family | grep Terminus)

if [ "$terminus" = '' ]; then
  printf -- "$(red '  ->') Terminus font could not be found using fc-list $(red '(missing)')\n"
  printf -- "$(yellow '  ->') We could have chosen a backup font.. $(yellow '(not implemented)')\n"
else
  printf -- "$(blue '  ->') Terminus font found using fc-list\n"
fi

# }}}
# Locale {{{

echo '--> Check locale-gen?'

printf -- "$(yellow '  ->') I do not currently write to /etc/vconsole.conf $(yellow '(not implemented)')\n"
printf -- "$(yellow '  ->') I do not currently write to tmux.conf $(yellow '(not implemented)')\n"

xresources=$(cat <<EOF
XTerm*utf8: 1
XTerm*geometry: 160x50
XTerm*font: -*-terminus-medium-*-*-*-28-*-*-*-*-*-iso10646-1
XTerm*titeInhibit: false
XTerm*ScrollBar: false
XTerm*ScrollKey: false
XTerm*metaSendsEscape: true
*background:  $background
*foreground:  $foreground
*cursorColor: $cursor
*color0:      $black
*color1:      $red
*color2:      $green
*color3:      $yellow
*color4:      $blue
*color5:      $magenta
*color6:      $cyan
*color7:      $white
*color8:      $bright_black
*color9:      $bright_red
*color10:     $bright_green
*color11:     $bright_yellow
*color12:     $bright_blue
*color13:     $bright_magenta
*color14:     $bright_cyan
*color15:     $bright_white
xterm.*backarrowKey: false
*ttyModes:         erase ^?
*VT100.Translations: \
        #override <Key>BackSpace: string(0x7f) \n\
                  <Key>Delete:    string(0x1b) string("[3~")
xterm*VT100.Translations: #override \
                Ctrl Shift <Key>V:    insert-selection(CLIPBOARD) \n\
                Ctrl Shift <Key>C:    copy-selection(CLIPBOARD)
EOF
)

xinitrc=$(cat <<"EOF"
LANG='en_GB.UTF-8'

[[ -f ~/.xresources ]] && xrdb -merge ~/.xresources

if [ `xdpyinfo | awk '/dimensions/{print $2}'` = '3840x2160' ]; then
  xrdb -merge <<< 'Xft.dpi: 144'
fi

xset r rate 200 25

setxkbmap -layout us -option ctrl:nocaps

exec openbox-session
EOF
)

xrdb -merge <<< "$xresources"
write_and_save ~/.xinitrc "$xinitrc"
write_and_save ~/.xresources "$xresources"

echo '--> What is my current keyboard layout?'
echo '--> what is my timezone?'
# TODO always softlink? check timedatectl first?
echo '--> is there a time sync daemon?'
echo '--> am I inside docker? no init?'

# TODO check arch linux for general recommendations

# }}}
# Shell {{{

printf -- "$(green '==>') Shell\n"

# TODO how to easily switch between projects beside bind?
# CDPATH with completion?
bashrc=$(cat <<"EOF"
shopt -s nocaseglob #case insensitive completion
[[ $- =~ i ]] && stty -ixoff -ixon # Disable CTRL-S and CTRL-Q

export EDITOR=nvim
export XDG_CONFIG_HOME=$HOME/.config
export PAGER='less -S'
export SSH_AUTH_SOCK=$HOME/.ssh/ssh-agent.socket
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin

alias gr='git rev-parse --show-toplevel || echo "."'
alias ..='cd ..'
alias t='tmux attach -t vty || tmux new -s vty'
alias de='export $(egrep -v "^#" .env | xargs)'
alias xclip='xclip -sel clip'
alias jv="jq -C | less -R"
alias ssha="ssh-agent -a $SSH_AUTH_SOCK && ssh-add ~/.ssh/id_rsa"

viw() { vi `which "$1"`; }
pp() { until ping -c1 1.1.1.1 >/dev/null 2>&1; do :; done; }
git_branch() { echo -e "$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')"; }

git_state() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo -ne "$(git_branch)"
    else
        echo -ne "!"
    fi
}

jobs_marker() {
  local n=$(jobs | wc -l)
  ((n)) && echo -n '&' || echo -n '$'
}

PROMPT_COMMAND='PS1="\W($(git_state)) $(jobs_marker) "'
EOF
)

write_and_save ~/.bashrc "$bashrc"
# }}}
# Git {{{
printf -- "$(green '==>') Git Aliases\n"

git config --global --replace-all core.editor 'vim'
git config --global --replace-all alias.aa 'add --all'
git config --global --replace-all alias.br 'branch --sort=committerdate'
git config --global --replace-all alias.count 'shortlog -sn'
git config --global --replace-all alias.ff 'pull --ff-only'
git config --global --replace-all alias.co 'checkout'
git config --global --replace-all alias.ci 'commit --verbose'
git config --global --replace-all alias.di 'diff'
git config --global --replace-all alias.dc 'diff --cache'
git config --global --replace-all alias.dd 'diff --stat origin/develop HEAD'
git config --global --replace-all alias.list 'config --global --list'
git config --global --replace-all alias.amend 'commit --amend'
git config --global --replace-all alias.ffa 'git fetch --all && git rebase origin/master'
git config --global --replace-all alias.push-new 'push -u origin HEAD'
git config --global --replace-all alias.ra "log --abbrev-commit --pretty=format:'%<(7)%C(yellow)%h %Cgreen%<(15)%cr%C(bold cyan)%<(17)<%an>%C(red)%d %Creset %s'"
# }}}
