#!/bin/sh -e
# vim: fdm=marker

# localectl set-x11-keymap us ctrl:nocaps

echo 'Rollout ___o'
# TODO copy rollout to /usr/local/bin? if there are no other executables

# Design decisions {{{
#
# Should rollout have softlinked files?
# Copy files stored inside a single sh file?
# echo minimal config?
#
# How destructive can rollout be? Could I use it on someone else's computer with confidence?
# maybe just mv to old if found? create new.. diff if diff then write over old
#
# Log what happened?
#
# How can I make output look pretty?
#
# # How do I source missing binaries?
# -> by package manager? select only a few supported platforms? e.g arch? nix?
# -> by source? or manual? flag to user so they can solve it themselves..
#    - maybe just point them in the right direction e.g mac osx? brew.. good luck!
# }}}
# Functions {{{

red_code='\033[31m'
green_code='\033[32m'
yellow_code='\033[33m'
reset_code='\033[0m'

function red {
  printf -- "$red_code$*$reset_code"
}

function yellow {
  printf -- "$yellow_code$*$reset_code"
}

function green {
  printf -- "$green_code$*$reset_code"
}

function check_network {
  if ping -q -c 1 -W 1 1.1.1.1 >/dev/null; then
    echo "$(green '-->') We are online! $(green Y)"
    return 0
  else
    echo "--> Network not established, exiting early.. $(red X)"
    return 1
  fi
}

function check_command {
  if [ ! $(command -v $1) ]; then
    printf -- "$(yellow You don\'t seem to have $1 installed.)\n"
    # exit 127 # TODO consider making this a fail
  # else
  #  echo "$1 is installed."
  fi

  if [ "$2" != "" ]; then # we are checking for version
    if [ "$1" = 'tmux' ]; then
      v_string=$(tmux -V)
      if [ "${v_string:5:1}" != "$2" ]; then
        printf -- "$(red tmux is version "${v_string:5:1}", not $2)\n"
        exit 127
      fi
    elif [ "$1" = 'java' ]; then
      v_string=$(java --version)
      if [ "${v_string:0:10}" != "$2" ]; then
        printf -- "$(yellow java is version "${v_string:0:10}", not $2)\n"
        # TODO exit?
      fi
    fi
  fi
}

# TODO trap exit_code and revert file changes if an error occurs

# }}}
# Read Arguments & Environment {{{

platform=$(uname)
connected=check_network

if [ ${#@} -ne 0 ]; then
  case $* in
    *--help*) printf -- '...help...\n'; exit 0;;
    *-h*) printf -- '...help...\n'; exit 0;;
  esac
fi

# }}}

# 
# Dependencies {{{

# TODO deps needs sorting
# we need java
# env/flag for alternate link?
# flag for --install

# think.. godeps?

# List of programs I'd like to have available (for dev):
# tmux git jq java boot gimp rlwrap gcc make automake autoconf \
# redis postgresql mongo htop openbox tmux neovim vim xterm \
# awk xorg openssh

# List of programs required for Clojure development:
# openjdk11 openjdk11-src lein clj

# List of programs I'd like to have available (personal):
# darkatable gthumb

# pacman? apt? yum? use their repos?

# }}}

# Configuration
# Tools/PATH {{{

echo '--> Do I have the basics?'

check_command grep
check_command vim
check_command nvim
check_command tmux 2

# }}}
# Locale {{{

echo '--> Check locale-gen?'

# TODO how to reliably check console fonts?
# if [ "$platform" = "Linux" ]; then
#   echo 'KEYMAP=us'
#   ls /usr/share/kbd/consolefonts/ | grep 'ter-228b'
# fi

check_command 'xterm'
check_command 'openbox-session'
check_command 'xrdb'
check_command 'xdpyinfo'
check_command 'awk'
check_command 'xset'
check_command 'setxkbmap'

xresources=$(cat <<"EOF"
something
EOF
)

xinitrc=$(cat <<"EOF"
LANG='en_GB.UTF-8'

[[ -f ~/.Xresources ]] && xrdb -merge ~/.Xresources

if [ `xdpyinfo | awk '/dimensions/{print $2}'` = '3840x2160' ]; then
  xrdb -merge <<< 'Xft.dpi: 144'
fi

xset r rate 200 25

setxkbmap -layout us -option ctrl:nocaps

exec openbox-session
EOF
)

echo "$xinitrc" > test-xinitrc
echo "$xresources" > test-xresources

echo '--> What is my current keyboard layout?'
echo '--> what is my timezone?'
# TODO always softlink? check timedatectl first?
echo '--> is there a time sync daemon?'
echo '--> am I inside docker? no init?'

check_command 'bash'

# TODO check arch linux for general recommendations

# }}}
# Shell {{{

# TODO how to easily switch between projects beside bind?
# CDPATH with completion?
bashrc=$(cat <<"EOF"
shopt -s nocaseglob #case insensitive completion
[[ $- =~ i ]] && stty -ixoff -ixon # Disable CTRL-S and CTRL-Q

export EDITOR=nvim
export XDG_CONFIG_HOME=$HOME/.config
export PAGER='less -S'
export SSH_AUTH_SOCK=$HOME/.ssh/ssh-agent.socket
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin

alias gr='git rev-parse --show-toplevel || echo "."'
alias ..='cd ..'
alias t='tmux attach -t vty || tmux new -s vty'
alias de='export $(egrep -v "^#" .env | xargs)'
alias xclip='xclip -sel clip'
alias jv="jq -C | less -R"

viw() { vi `which "$1"` }
pp() { until ping -c1 1.1.1.1 >/dev/null 2>&1; do :; done }
git_branch() { echo -e "$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')" }

git_state() {
    if git rev-parse --git-dir >/dev/null 2>&1; then
        echo -ne "$(git_branch)"
    else
        echo -ne "!"
    fi
}

jobs_marker() {
  local n=$(jobs | wc -l)
  ((n)) && echo -n '&' || echo -n '$'
}

PROMPT_COMMAND='PS1="\W($(git_state)) $(jobs_marker) "'
EOF
)

echo "$bashrc" > test-bashrc
# TODO eval bashrc too.. export vars to current session?

# }}}
# System {{{
# TODO is systemctl/init available? if not then find a way to run stuff in the background
# e.g ssh-agent
# }}}
# Font {{{

terminus=$(fc-list : family | grep Terminus)

if [ "$terminus" = '' ]; then
  yellow "Terminus could not be found\n"
fi

# }}}
# Colors {{{

echo 'choose night or day'

# take vars describes here, put them into their respective configs

# TODO should be if --sun/--moon/--lumo etc (lumo by default for now)
if true; then
  echo 'Sun theme'
# # Sun theme
# *.foreground:   #fcfcfa
# *.background:   #2d2a2e
# *.cursorColor:  #fcfcfa
# 
# ! black
# *.color0:       #383539
# *.color8:       #989599
# 
# ! red
# *.color1:       #ff6188
# *.color9:       #ff89a6
# 
# ! green
# *.color2:       #a9dc76
# *.color10:      #c5e0a9
# 
# ! yellow
# *.color3:       #fc9867
# *.color11:      #ffd866
# 
# ! blue
# *.color4:       #78dce8
# *.color12:      #c9edf1
# 
# ! magenta
# *.color5:       #ab9df2
# *.color13:      #b294bb
# 
# ! cyan
# *.color6:       #78e8cf
# *.color14:      #c4f9ed
# 
# ! white
# *.color7:       #c3c1c3
# *.color15:      #f8f8f2
fi


echo '--> Does my shell have colors set?'
echo '--> for X?'
echo '--> for OSX?'
echo '--> for Cygwin?'
echo '--> for Powershell?'
echo '--> for (neo)vim?'
echo '--> for emacs?'

# }}}
# Git configuration (and others?) {{{

# sed -i append in particular sections
# e.g add git aa if aa = not present in alias section
echo '--> Is git configured?'
echo 'what do I want to be there?'
echo 'aa + ci + maybe ra?, git count'
# }}}
# SSH / System daemons (xrdp?) {{{
echo '--> Do I have an ssh key?'
echo '--> Is systemd running?'
echo '--> Is ssh-agent running?'
# }}}

